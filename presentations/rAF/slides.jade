section
    h2 Throttling in the browser...
    h2 done right


section
    h2 About me

    h5 Name
    p Reto Schl√§pfer

    h5 Work
    p React.js/Flux & Finance related backend stuff in Python at #[i Bluevalor AG]

    h5 Blog
    p www.code-experience.com

    h5 Twitter
    p: i @Retolements

    h5 GitHub
    p: i Retozi

section
    h2 Why throttling

    div
        li Some events fire often! (mousemove, scroll, resize)

        li functions can be called very very often

        li Everything above 60 fps is not visually noticable


section

    h2 Throttling via underscore

    pre
        code.hljs.javascript.
            var throtteledFun = _.throttle(onMouseClick, 1000 / 60);

            $(".foo").mousemove(throtteledFun);

section

    h2 Under the hood

    pre
        code.hljs.javascript.
            function throttle(func, frameRate) {
                var _wait = false;
                return function() {
                    if (_wait) {
                        return;
                    }

                    _wait = true;
                    setTimeout(function() {
                        _wait = false;
                        func();
                    }, frameRate);
                };
            }

section

    h2 Problems

    li static call rate

    li multiple throttlers are not bundled

    li call cycle is not synchronized with the browser reflow repaint cycle

    li runs even if animation is actually not visible


section

    h2 Solution:

    p: strong: i window.requestAnimationFrame()

    li calls function every frame

    li batches calls

    li aligns with browser reflow repaint cycle

    li does not run in tabs that are not visible


section

    h2 A working throttler

    pre
        code.hljs.javascript.
            function throttle(func) {
                var _lastFun = func;
                return function() {
                    _lastFun = fun;
                    requestAnimationFrame(function() {
                        if (_lastFun) {
                            _lastFun();
                            _lastFun = null;
                        }
                    });
                };
            }



section

    h2 A (slightly) better throttler

    pre
        code.hljs.javascript.
            function throttle(func, frameRate) {
                var _wait = false;
                return function() {
                    if (_wait) {
                        return;
                    }
                    _wait = true;
                    requestAnimationFrame(function() {
                        _wait = false;
                        func();
                    }, frameRate);
                };
            }


section

    h2 Proof

    div.demo-box#naive
        p naive
        div.green

    div.demo-box#normal
        p normal
        div.green

section

    h2 rAF is like setTimeout

    pre
        code.hljs.javascript.

            var frameId = null;
            // recursive call
            function loop() {
                frameId = requestAnimationFrame(loop)

                // abort loop
                if (someCondition) {
                    cancelAnimationFrame(frameId)
                }



section

    h2 Implications of rAF

    li gracefully handles bottlenecks

    li call it as often as you want

    li you can do custom animations with similar performance to css transitions


section

    h2 Some other Remarks

    li you need a polyfill for older browsers

    li check out Velocity.js for performant jquery animations

