section
    h1 Observable web
    h3 Untangling async 
        div.fragment completely

    p.author-name Ganesh Shanmugasundaram

section
   img.center.logo(src=require('./img/logo.png'))
    
   img.fragment.center.london(src=require('./img/london.png'))
   
section
    h1 Time 
        div.fragment async
        
section
    h1 Webdev Problem

section
    h1 Build <br> a feature
    ul
        li.fragment Thought process
        li.fragment Series of steps

section
    h1 User story
    ul
        li.fragment Type something in search box
        li.fragment Show search suggestions
        li.fragment Update suggestions

section
    h1 Pseudocode
    ul.pseudocode
        li.fragment Get input from the user
        li.fragment Get Suggestions
        li.fragment Display result
        li.fragment Repeat
        
section
    h1 Handling async
        img.fragment.center(src=require('./img/callbacks-everywhere.jpg'))

section
    h1 Step 1: Input
    pre
        code.javascript searchBox.addEventListener('keyup', (e) => {
            |     let text = e.target.value;
            | });
        
section
    h1 Step 2: Suggestions
    pre
        code.javascript  searchBox.addEventListener('keyup', (e) => {
            |    let term = e.target.value;
            |    performSearch(term, (result) => {
            |        
            |    });
            | });
            
section
    h1 Step 3: Render
    pre
        code.javascript const searchBox = document.getElementById('searchbox');
            | searchBox.addEventListener('keyup', (e) => {
            |     let term = e.target.value;
            |     performSearch(term, (result) => {
            |         displayResult(result);
            |     });
            | }); 
            
section
    h1 Done!
    img.center(src=require('./img/peter-happy.jpg'))

section
    h1 Wait!
    img.center(src=require('./img/website-never-done.jpg'))

section
    p Love the new auto suggest feature you guys have launched. 
        | But it acts a bit weird sometimes.
    
    p
    
    p.fragment I was on the tube this morning, i was trying to search for a book, 
        | i typed 5 letters and it showed me the exact book i wanted, but when i tried to click on it, 
        | it showed to a different book, which wasn't that relevent. 
        | I had to press backspace and the same letter again to get to the book, but it worked the second time. 
        | The same issue happened a few times during my journey 
        | I'm on iphone 5S, not sure how to check the browser version. 
        | I can't seem to reproduce the issue now though, seemed to have fixed itself!

section
    h1 Extended scenario
    ul
        li.fragment Mobile internet 
        li.fragment On Tube 
            span.fragment or Metro
        li.fragment Trying to search

section
    h1 Things to consider
    ul
        li.fragment Slower network
        li.fragment Unstable network
        li.fragment Network cost
        li.fragment Device constraints

section
    h1 Improvements
    ul
        li.fragment Reduce network requests
        li.fragment Remove duplicate requests
        li.fragment Handle race condition
        
section
    h1 Debounce
    pre
        code.js const searchBox = document.getElementById('searchbox');
            | var requestTimer = null;
            | searchBox.addEventListener('keyup', (e) => {
            |     let term = e.target.value;
            |     clearTimeout(requestTimer);
            |     requestTimer = setTimeout(() => {
            |         performSearch(term, (result) => {
            |             displayResult(result);
            |         );
            |     }, 100);
            | });

section
    h1 More problems
    ul
        li.fragment state
        li.fragment callback hell
        li.fragment one more problem...
        
section
    img(src=require('./img/brace.jpg'))
    
section
    h1 Promises may be?
    ul
        li.fragment cool
        li.fragment readable and comprehendable
        li.fragment supported in most modern browsers

section
    h1 Promises in action!
    div.wrap
        div.half
            ul
                li.fragment one value
                li.fragment no modify
                li.fragment no cancel
        div.half.fragment
            pre
                code.javascript const searchBox = document.getElementById('searchbox');
                    | var requestTimer = null;
                    | searchBox.addEventListener('keyup', (e) => {
                    |     let term = e.target.value;
                    |     clearTimeout(requestTimer);
                    |     requestTimer = setTimeout(() => {
                    |         fetch('/search?term='+term)
                    |             .then((resp) => {
                    |                 return resp.json();
                    |             }).then((result) => {
                    |                 displayResult(result);
                    |             })
                    |     }, 300);
                    | });

section
    h1 Simple feature?
    img(src=require('./img/grind-gear.jpg'))

section
    h1 Observable
    ul
        li.fragment Modelling async data
        li.fragment Emits 0 -> n values

section
    h1 Where does it fit?
    ul
        li.fragment Primitive: sync + single value
        li.fragment Iterator: sync + multiple value
        li.fragment Promise: async + single value
        li.fragment
            span.fragment Observable: 
            span   async + multiple value 

section
    h1 Syntax ~ Promise
    pre.fragment
        code.javascript const p = new Promise();
            | p.then(onResolve, onReject);
            
section
    h1 Subscribe vs then
    pre
        code.javascript const ob = new Observable({});
            | ob.subscribe(onNext, onError);

section
    h1 onComplete
    pre
        code.javascript const ob = new Observable({});
            | const subscription = ob.subscribe(onNext, 
            |                                    onComplete,
            |                                    onError);
 
 section 
    h1 Unsubscribe
    pre
        code.javascript const ob = new Observable({});
            | const subscription = ob.subscribe(onNext, 
            |                                    onComplete,
            |                                    onError);
            | subscription.unsubscribe();

section
    h1 Creating an Observable
    pre
        code.javascript $clickObs = new Observable(observer => {
           |     const element = docuement.getElementById('btn');
           |     let handler =  (evt) => {
           |         observer.next(evt);
           |     };
           |     
           |     element.addEventListener('click', handler, true);
           |     
           |     return _ =>  {
           |         element.removeEventListener('click', handler, true);
           |     }
           |     
           | }); 

 section
    h1 What can be Observables?
    ul
        li.fragment Keyboard events
        li.fragment Mouse events
        li.fragment Animation
        li.fragment Lifecycle events
        li.fragment XHR requests
        li.fragment WebSocket requests and messages
        li.fragment everything else...
        
section
    h1 Event emitter?
    ul
        li.fragment Both emit 0 - n values
        li.fragment  Can be subscribed on
        li.fragment Lazy ( or cold by default)
        li.fragment Operation happens on subscription 
        li.fragment Each subscriber will get different values

section
    h1 What if i want to share values?
    ul
        li.fragment Make it hot
        li.fragment Operation happens on first subscription
        li.fragment Other subscribers just listen
        li.fragment Not all the subscribers get all the values

section
    h1 What's so special?
    ul
        li.fragment Unified protocol
        li.fragment Transformable
        li.fragment Composable
        li.fragment using Array#Operators like map, forEach, reduce.
        
section
    h1 Treat them like iterators
    pre
        code.javascript [1,2,3].map(x => x*x)
            | .reduce((x, sum) => sum+x, 0);
            | // 14
section
    h1 Subscribing to the Click Counter
    pre
        code.javascript $clickObs.subscribe(onNext, onComplete, onError);
            | // event [Object]
            | // event [Object]
            | // event [Object]
            
section
    h1 Map Click Counter
    pre
        code.javascript $clickObs
            | .map(x => 1)
            | .subscribe(onNext, onComplete, onError);
            | // 1
            | // 1
            | // 1

section
    h1 Scan (reduce) Click Counter
    pre
        code.javascript $clickObs
            | .map(x => 1)
            | .scan((x, y) => x+y)
            | .subscribe(onNext, onComplete, onError);
            | // 1
            | // 2
            | // 3

section
    h1  Browser support?
    ul
        li.fragment well...
        li.fragment still in tc39 proposal
        li.fragment stage 1
        li.fragment not for ES2016 / ES7
        li.fragment but...

section
    h1 Projects
    ul
        li.fragment rxJS
        li.fragment baconJS
        li.fragment Angular 2 (http)
        li.fragment more...
        
section
    h1 AutoSuggest
    pre
        code.javascript const searchObs  = Observable.fromEvent(searchBox, 'keyUp');
            | searchObs.subscribe(onNext, onComplete, onError);
            | // [evt Object]
            | // [evt Object] 
            | // [evt Object] 
            | // [evt Object] 
            | // [evt Object] 

section
    h1 AutoSuggest
    pre
        code.javascript const searchObs  = Observable.fromEvent(searchBox, 'keyUp')
            |           .map(e => e.target.value);
            | searchObs.subscribe(onNext, onComplete, onError);
            | // h
            | // ha
            | // har
            | // harr
            | // harr <-- the user has pressed down key
            | // harry


section
    h1 AutoSuggest
    pre
        code.javascript const searchObs  = Observable.fromEvent(searchBox, 'keyUp')
            |            .map(e => e.target.value)
            |           .map( term => fetch('/search?term='+term).then(resp => resp.json() ) );
            | searchObs.subscribe(onNext, onComplete, onError);
            | // [Result Object]
            | // [Result Object]
            | // [Result Object]
            | // [Result Object]
            | // [Result Object]
            | // [Result Object]

section
    h1 AutoSuggest Improved
    pre
        code.javascript const searchObs  = Observable.fromEvent(searchBox, 'keyUp')
            |            .map(e => e.target.value)
            |            .debounce(100)
            |           .map( term => fetch('/search?term='+term).then(resp => resp.json() ) );
            | searchObs.subscribe(onNext, onComplete, onError);
            | // [Result Object]
            | // [Result Object]

section
    h1 AutoSuggest Improved
    pre
        code.javascript const searchObs  = Observable.fromEvent(searchBox, 'keyUp')
            |            .map(e => e.target.value)
            |            .debounce(100)
            |            .distinctUntilChanged()
            |            .map( term => fetch('/search?term='+term).then(resp => resp.json() ) );
            | searchObs.subscribe(onNext, onComplete, onError);
            | // [Result Object]

section
    h1 td;dr
    ul
        li.fragment embrace Observables
        li.fragment start using it today
        li.fragment push for the standards
        li.fragment write clean code
        li.fragment future You will thank You


section
    h1 Q/A