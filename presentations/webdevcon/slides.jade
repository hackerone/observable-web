section
    h1 Observable web
    h3 Untangling async

section
    h2 Agenda
    ul
        li Why do we need bundlers and what should they be capable of?
        li Review of the main competitors of Webpack
        li Why Webpack and how do you use it?
        li Live Demo

section
    h2 About me

    h5 Name
    p Reto SchlÃ¤pfer

    h5 Work
    p React.js/Flux & Finance related backend stuff in Python at #[i Bluevalor AG]

    h5 Blog
    p www.code-experience.com

    h5 Twitter
    p: i @Retolements

    h5 GitHub
    p: i Retozi

    aside.
        blabla


section
    h2 Why do we need a bundler?

    div.fragment
        p Because modules should be small, and loading many modules through HTTP-Requests is slow.

        p Bundling modules reduces the amount of necessary HTTP-Requests to load our app.



section
    h2 Requirements for a good bundler


section
    h2 For production

    p: i A bundling strategy that makes your app load quickly:

    p -> Deliver modules that are needed at the same time in one HTTP-Request.

    p -> Deliver independent modules seperately.

    p -> Optimize size of bundles and their caching.


section
    h2 For Development

    p Deliver changes to modules instantly.

    p Importing dependencies into your modules should be easy.

    p Minimal configuration / processing scripts.


section
    h2 RequireJS vs Browserify


section
    h2 RequireJS

    p AMD style modules

    pre
        code.hljs.javascript.
            define([
              'jquery',
              'underscore',
              'backbone',
              'router',
            ], function($, _, Backbone, Router){
              var initialize = function(){
                Router.initialize();
              }

              return {
                initialize: initialize
              };
            });

section
    h2 RequireJS: The Good

    ul
        li Battle proven

        li Asynchronous loading in the core (default in dev-mode)

section
    h2 RequireJS: The Bad

    ul
     li AMD is out, CommonJS is in (npm EVERYTHING)

     li A lot is possible, but everything requires massive configuration

     li Dev-mode doesn't scale


section
    h2 Browserify

    p CommonJS style modules

    pre
        code.hjs.javascript.

            var $ = require('jquery');
            var _ = require('lodash');
            var backbone = require('backbone');
            var router = require('Router');

              var initialize = function(){
                Router.initialize();
              }

            module.exports = initialize;

section

    h2 Browserify: The Good

    li Use npm / node.js libraries

    li.
        Plays well with Gulp/Grunt. => powerful processing strategies.

    li CommonJS syntax is better



section
    h2 Browserify: The Bad

    li you need Gulp/Grunt and plugins for instant dev rebuilds.

    li.
        Default: bundling into a single file. Async loading & multiple bundles
        possible, but must be done manually.


section

    h2 Conclusion

    p Internet Consensus: Browserify > RequireJS for most of the cases

    p.
        Both solutions get the job done well, but there are rough edges here
        and there.


section

    h2 Webpack

    p Instagram/Facebook hypes it, Yahoo uses it as well.


section

    h2 Definition style agnostic

    p Supports AMD, CommonJS and even ES6 modules


section

    h2 Everything is a module

    p Why do other bundlers only care about Javascript modules?

    p There are other assets that need bundling! Webpack enables you to do that.


section(data-state="white-background")

    p Take the full dependency graph of all assets, and bundle them to your liking

    img#what-is-webpack


section

    h2 Bundling into one file is not enough

    p If our app is big, you would like to split the assets into multiple files:

    p Webpack will offer you powerful bundling strategies with minimal configuration



section

    h2 Dev experience is great

    p.
        Webpack ships awesome dev-tools that provide instant rebuilds with
        hot reload.


section

    h2 How to use Webpack
    pre
        code.hjs.javascript.
            // ------------------
            // webpack.config.js
            // ------------------

            module.exports = {
                entry: ['./src/app.js'],
                output: {
                    path: __dirname + '/build/js',
                    filename: 'bundle.js',
                    publicPath: '/js/'
                }
            };

    pre
        code.bash.
            bash:~$ webpack

section

    h2 How the hell do I bundle pngs and css?


    pre
        code.hljs.javascript.

            //yes, we require sass!
            require('./mySassForThisModule.scss');

            var _ = require('lodash');
            var FooComponent = require('./FooComponent.jsx');

            //yes, we require png!
            var imageLink = require('../../img/myImage.png');

            // do something with imageLink, FooComponent and lodash

            module.exports = ThisModule;

    p.
        If you bundle this with webpack, all the assets will be automagically
        available when you include your bundle into your html document.


section

    h2 Loaders

    blockquote(cite="http://webpack.github.io/docs/loaders.html").
        Loaders are transformations that are applied on files. They preprocess files.
        For instance they can transform CoffeeScript to JavaScript.


section

    h2 Lots of Loaders (via npm)
    ul
        li inlining stylesheets
        li various preprocessors (jsx, CoffeeScript, es6)
        li templates
        li files, jsons, source-maps
        li promises, webworkers


section

    h2 Loader Configuration

    pre
        code.hljs.javascript.
            // ------------------
            // webpack.config.js
            // ------------------
            ...,
            module: {
                loaders: [
                    {
                        test: /\.js.{0,1}$/,
                        loader: 'jsx?harmony'
                    },{
                        test: /\.scss$/,
                        loader: "style!css!sass?outputStyle=expanded&includePaths[]=" + __dirname + '/src/scss'
                    }, {
                        test: /\.css$/,
                        loader: "style!css"
                    }
                ],
            },
            ...


section

    h2 Loaders are awesome

    p requiring and inlining stylesheets is super helpful.

    p you get all the freedom you need with preprocessors.

    p you can do cool stuff like inlining small pngs or json files.

    p bye bye Grunt/Gulp.


section

    h2 So your project is big...


section

    h2 Load on Demand

    p Create splitpoints

    pre
        code.hljs.javascript.

            require.ensure(["./otherPart.js"], function (otherPart) {
                // now you can use otherPart
            });

    p.
        This will create two files (called chunks by Webpack).
        One is your entrypoint, the other gets loaded on demand.


section

    h2 Multiple Entrypoints

    p Run the CommonsChunkPlugin to split code up

    pre
        code.hljs.javascript.
            {
                entry: { a: "./a", b: "./b" },
                output: { filename: "[name].js" },
                plugins: [ new webpack.CommonsChunkPlugin("common.js") ]
            }


section

    h2 Caching

    p Add hashes to your filenames

    pre
        code.hljs.javascript.
            output: {
                path: path.join(__dirname, "assets", "[hash]"),
                publicPath: "assets/[hash]/",
                filename: "output.[hash].bundle.js",
                chunkFilename: "[id].[hash].bundle.js"
            }


section

    h2 There is more

    ul
        li uglify
        li dedupe
        li various chunk optimizations (max chunk count, min chunk size)
        li gulp/grunt
        li target various runtimes


section

    h2 Development productivity


section

    h2 webpack-dev-server

    p Incremental (=instant) rebuilds

    p hot reload without plugins


section

    h2 dev-server setup

    pre
        code.hljs.javascript.
            // ------------------
            // server.js
            // ------------------
            "use strict";
            var webpack = require('webpack');
            var WebpackDevServer = require('webpack-dev-server');
            var config = require('./webpack.config');

            var server = new WebpackDevServer(webpack(config), {
                // webpack-dev-server options
                hot: true,
                contentBase: __dirname,
                quiet: false,
                noInfo: false,
                publicPath: '/js/',
                stats: { colors: true }
            });

            server.listen(8081, "localhost", function() {});

section

    h2 dev-server setup (2)

    pre
        code.hljs.javascript.
            // ------------------
            // webpack.config.js
            // ------------------
            entry: [
                './slides-loader.js',
                'webpack/hot/dev-server',
                'webpack-dev-server/client?http://localhost:8081'
            ],
            plugins: [new webpack.HotModuleReplacementPlugin()],

section

    h2 Live Demo!

section

    h2 Further Reading

    li
        a(href="http://webpack.github.io/docs/") http://webpack.github.io/docs/

        span  (especially list of tutorials)

    li
        a(href="https://github.com/petehunt/webpack-howto").
            https://github.com/petehunt/webpack-howto
section

    h2 Wrap-Up

    li Good bundling is important (and easier than server-side rendering)

    li Webpack combines the strengths of RequireJS and Browserify

    li Webpack is a bundler for everbody

    li It is easy to migrate

    li Webpack is well supported (because of the cool kids)
